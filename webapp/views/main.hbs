<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <link type="text/css" rel="stylesheet" href="css/all.css"/>
        <link type="text/css" rel="stylesheet" href="css/maptalks.css"/>

        <script type="text/javascript" src="js/jquery-3.2.1.slim.min.js"></script>

        <script type="text/javascript" src="js/three.min.js"></script>
        <script type="text/javascript" src="js/OrbitControls.js"></script>

        <script type="text/javascript" src="js/gauge.min.js"></script>
        <script type="text/javascript" src="js/maptalks.min.js"></script>

        <script type="text/javascript" src="js/Decoder.js"></script>
        <script type="text/javascript" src="js/YUVCanvas.js"></script>
        <script type="text/javascript" src="js/Player.js"></script>

        <script type="text/javascript" src="js/libcluon-0.0.104.js"></script>

        <style>
            body, html {
                height: 100%;
                margin: 0;
            }

            * {
                box-sizing: border-box;
                font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
                font-size: 12px;
            }

            .button-noborder {
                border: none;
                padding: 0;
                background: none;
                font-size:20px;
                font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
                color:#555;
                padding: 5px 30px;
            }
            .bg {
                background-image: url("background.jpg");
                height: 100%; 
                width: 100vw;
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover;
                animation: zoom 20s;
                -webkit-animation-fill-mode: forwards;
                background-attachment: fixed;
                position: fixed;
                z-index: -1;
            }
            @keyframes zoom {
              0% {
                transform: scale(1, 1);
              }
              100% {
                transform: scale(1.1, 1.1);
              }
            }

            .main {
              float:left;
              width:75%;
              padding:2px 2px;
              margin-top:10px;
              margin-left:10px;
            }

            .right {
              float:right;
              width:23%;
              padding:2px 2px;
              margin-top:10px;
              margin-left:10px;
            }

            .element {
              margin-top:10px;
              margin-left:10px;
              box-shadow: 3px 3px 3px #aaaaaa;
            }

            .elementNoShadow {
            }

            .module > header {
              position: absolute;
              bottom: 0;
              left: 0;
              width: 100%;
              padding: 20px 10px;
              background: inherit;
              background-attachment: fixed;
            }
            .module > header > h1 {
                margin: 0;
                font-size:20px;
                font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
                color: gray;
                position: relative;
                z-index: 1;
            }

            .overlay {
                height: 0%;
                width: 100%;
                position: fixed;
                z-index: 10;
                top: 0;
                left: 0;
                background-color: rgb(0,0,0);
                background-color: rgba(0,0,0,0.9);
                overflow-y: hidden;
                transition: 0.7s;
            }

            .overlay-content {
                position: relative;
                top: 25%;
                width: 100%;
                text-align: center;
                margin-top: 30px;
            }

            .overlay a {
                padding: 8px;
                text-decoration: none;
                font-size: 36px;
                color: #818181;
                display: block;
                transition: 0.3s;
            }

            .overlay p {
                font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
                padding: 8px;
                text-decoration: none;
                font-size: 36px;
                color: #818181;
                display: block;
                transition: 0.3s;
            }

            .overlay table {
                font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
                font-size: 20px;
                color: #818181;
                transition: 0.3s;
            }

            .overlay a:hover, .overlay a:focus {
                color: #f1f1f1;
            }


            .overlay .closebtn {
                position: absolute;
                top: 20px;
                right: 45px;
                font-size: 60px;
            }

            #map { width: 220px; height: 220px;  }

            @media only screen and (max-width:800px) {
              /* For tablets: */
              .main {
                width:80%;
              }
              .right {
                width:100%;
              }
              .overlay {overflow-y: auto;}
              .overlay a {font-size: 20px}
              .overlay .closebtn {
                font-size: 40px;
                top: 15px;
                right: 35px;
              }
            }
            @media only screen and (max-width:500px) {
              /* For mobile phones: */
              .main, .right {
                width:100%;
              }
              .overlay {overflow-y: auto;}
              .overlay a {font-size: 20px}
              .overlay .closebtn {
                font-size: 40px;
                top: 15px;
                right: 35px;
              }
            }

{{#if playbackPage}}
            input[type=range] {
              -webkit-appearance: none;
              width: 100%;
              margin: 5px 0;
            }
            input[type=range]:focus {
              outline: none;
            }
            input[type=range]::-webkit-slider-runnable-track {
              width: 100%;
              height: 8px;
              cursor: pointer;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
              background: #0598db;
              border-radius: 1.3px;
              border: 0.2px solid #010101;
            }
            input[type=range]::-webkit-slider-thumb {
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
              border: 1px solid #000000;
              height: 18px;
              width: 16px;
              border-radius: 6px;
              background: #ffffff;
              cursor: pointer;
              -webkit-appearance: none;
              margin-top: -5.2px;
            }
            input[type=range]:focus::-webkit-slider-runnable-track {
              background: #0598db;
            }
            input[type=range]::-moz-range-track {
              width: 100%;
              height: 8px;
              cursor: pointer;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
              background: #0598db;
              border-radius: 1.3px;
              border: 0.2px solid #010101;
            }
            input[type=range]::-moz-range-thumb {
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
              border: 1px solid #000000;
              height: 18px;
              width: 16px;
              border-radius: 6px;
              background: #ffffff;
              cursor: pointer;
            }
            input[type=range]::-ms-track {
              width: 100%;
              height: 8px;
              cursor: pointer;
              background: transparent;
              border-color: transparent;
              color: transparent;
            }
            input[type=range]::-ms-fill-lower {
              background: #2a6495;
              border: 0.2px solid #010101;
              border-radius: 2.6px;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
            }
            input[type=range]::-ms-fill-upper {
              background: #0598db;
              border: 0.2px solid #010101;
              border-radius: 2.6px;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
            }
            input[type=range]::-ms-thumb {
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
              border: 1px solid #000000;
              height: 18px;
              width: 16px;
              border-radius: 6px;
              background: #ffffff;
              cursor: pointer;
              height: 8px;
            }
            input[type=range]:focus::-ms-fill-lower {
              background: #3071a9;
            }
            input[type=range]:focus::-ms-fill-upper {
              background: #367ebd;
            }
{{/if}}

            .slidingMessageViewFromTop {
                position: absolute;
                width: 700px;
                height: 400px;
                top: 1;
                overflow: scroll;
                background-color: #FFF; color: #000;
                transition: all 1s;
                z-index: 1;
                font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
                font-size: 11px;
            }
            .slidingMessageViewFromTop.close {
                height: 0;
            }
        </style>
    </head>

<!----------------------------------------------------------------------------->
<div id="systemLoadOverview" class="overlay">
    <a href="javascript:void(0)" class="closebtn" onclick="closeSystemLoadOverview()">&times;</a>
    <div class="overlay-content">
        <center>
        <table cellpadding="10" id="table-systemload">
            <thead>
            <tr>
               <th>Container ID</th>
               <th>Name</th>
               <th>Memory [%]</th>
               <th>CPU [%]</th>
            </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
        </center>
    </div>
</div>

<script type="text/javascript">
function openSystemLoadOverview() {
    document.getElementById("systemLoadOverview").style.height = "100%";
}

function closeSystemLoadOverview() {
    document.getElementById("systemLoadOverview").style.height = "0%";
}

var $tableSystemLoad = $('#table-systemload');
var systemLoadSource = new EventSource('/systemloadupdates');
systemLoadSource.addEventListener('message', function(e) {
    try {
        var load = JSON.parse(e.data);

        $tableSystemLoad.empty(); // empty is more explicit

        var $row = $('<tr>').appendTo($tableSystemLoad);
        var $headerContainerID = $('<th>').text("Container ID").appendTo($row);
        var $headerName = $('<th>').text("Name").appendTo($row);
        var $headerMem = $('<th>').text("Memory [%]").appendTo($row);
        var $headerCPU = $('<th>').text("CPU [%]").appendTo($row);

        for (var k in load) {
            $row = $('<tr>').appendTo($tableSystemLoad);
            var $containerID = $('<td align="center">').text(load[k].container).appendTo($row);
            var $name = $('<td align="center">').text(load[k].name).appendTo($row);
            var $mem = $('<td align="right">').text(load[k].mem).appendTo($row);
            var $cpu = $('<td align="right">').text(load[k].cpu).appendTo($row);
        }
    }
    catch (ex) {}
}, false);
</script>

<div class="bg"></div>

<div class="module">
    <header>
        <h1>OpenDLV Vehicle View</h1>
{{#if livePage}}
<div onclick="location.href='virtualjoystick.html'""><i id="showMessages" class="fas fa-gamepad" style="font-size:30px;color:gray;cursor:pointer;"></i></div>
{{/if}}
    </header>
</div>

<div>
    <div style="overflow:auto">
        <div class="main">

<!----------------------------------------------------------------------------->
            <div onclick="toggleMessageViewFromTop()"><i id="showMessages" class="fas fa-bars" style="font-size:30px;color:gray;cursor:pointer;"></i></div>
            <div class="slidingMessageViewFromTop close">
                <table>
{{#if useExternallySuppliedODVDFile}}
                    The messages below are resolved using a user-supplied message specification file (you can remove it on the folder view).<br>
{{else}}
                    The messages below are resolved using the OpenDLV Standard Message Set (you can supply a different one on the folder view).<br>
{{/if}}
                    <tbody id="table-messages-details" align="left" valign="top">
                    </tbody>
                </table>
            </div>
            <script>
            function toggleMessageViewFromTop() {
                $('.slidingMessageViewFromTop').toggleClass('close');
            }
            </script>
<!----------------------------------------------------------------------------->

            <div class="elementNoShadow">
                <center>
                    <div id="canvasForH264Frame"></div>
                    <div id="ego-3dview"></div>
                    <canvas id="canvasForVPXFrame"></canvas>
                </center>
            </div>
        </div>

        <div class="right">
            <div class="element">
{{#if livePage}}
                <center>
                    <table cellpadding="2">
                        <tr>
                            <td colspan="2">
                                <center>
                                <div onclick="openSystemLoadOverview()"><i id="connectionStatusSymbol" class="fa fa-taxi" style="font-size:30px;color:#555"></i></div>
                                <div id="connectionStatusText">disconnected</div>
                                </center>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <button id="record" type="button" class="fa fa-circle" style="font-size:20px;color:#555;padding: 5px 30px;" title="Start recording this live session."></button>
                            </td>
                            <td>
                                <button id="recordings" type="button" class="far fa-folder-open" style="font-size:20px;color:#555;padding: 5px 30px;" onclick="location.href='recordings'" title="View and handle existing recording files."></button>
                            </td>
                        </tr>
                    </table>
                </center>
{{/if}}
{{#if playbackPage}}
                <center>
                    <table cellpadding="2">
                        <tr>
                            <td>
                                <button id="endReplay" type="button" class="fas fa-power-off" style="font-size:20px;color:#555;padding: 5px 30px;" onclick="endReplay(true)" title="End replay and return to live OD4Session."></button>
                            </td>
                            <td>
                                <button id="recordings" type="button" class="far fa-folder-open" style="font-size:20px;color:#555;padding: 5px 30px;" onclick="endReplay(false)" title="End replay and return to view and handle existing recording files."></button>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <button id="replayStartOver" type="button" class="fas fa-undo-alt" style="font-size:20px;color:#555;padding: 5px 17px;" onclick="remotePlayer('replayStartOver')" title="Restart playback from beginning."></button>
                                <button id="playButton" type="button" class="fas fa-pause" style="font-size:20px;color:#555;padding: 5px 17px;" onclick="remotePlayer('playButton')" title="Play/Pause."></button>
                                <button id="stepforwardButton" type="button" class="fas fa-step-forward" style="font-size:20px;color:#555;padding: 5px 17px;" onclick="remotePlayer('stepForwardButton')" title="Step forward."></button>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <input type="range" min="1" max="100" value="1" class="slider" id="playbackrange">
                            </td>
                        </tr>

                    </table>
                </center>
{{/if}}
            </div>

            <div class="element">
                <center>
                <canvas id="speed"></canvas>
                </center>
            </div>

            <div class="element">
                <center>
                <div id="map"></div>
                </center>
            </div>

            <div class="element">
                <center>
                <table cellpadding="2">
                    <tr>
                    <td>
                    Now:
                    </td>
                    <td>
                    <div id="currentTime">-</div>
                    </td>
                    </tr>

                    <tr>
                    <td>
                    Sample:
                    </td>
                    <td>
                    <div id="containerTimeStamp">-</div>
                    </td>
                    </tr>

                    <tr>
                    <td>
                    Sample (Unix Epoch):
                    </td>
                    <td>
                    <div id="containerTimeStampUnix">-</div>
                    </td>
                    </tr>
                </table>
                </center>
            </div>

            <div class="element" id="messagesElement">
                <center>
                <table>
                    <tbody id="table-messages-overview">
                    </tbody>
                </table>
                </center>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById('canvasForVPXFrame').style.visibility = "hidden";

    // Inspired by https://github.com/kazuki/video-codec.js
    var Decoder = (function () {
        function Decoder(worker_script_path) {
            this.worker = new Worker(worker_script_path);
        }
        Decoder.prototype.setup = function (cfg, packet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.worker.onmessage = function (ev) {
                    if (ev.data.status == 0) {
                        resolve(ev.data);
                    }
                    else {
                        reject(ev.data);
                    }
                };
                _this.worker.postMessage({
                    params: cfg,
                    packet: packet
                });
            });
        };
        Decoder.prototype.decode = function (packet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.worker.onmessage = function (ev) {
                    if (ev.data.status == 0) {
                        resolve(ev.data);
                    }
                    else {
                        reject(ev.data);
                    }
                };
                _this.worker.postMessage(packet, [packet.data]);
            });
        };
        return Decoder;
    })();

    var Renderer = (function () {
        function Renderer(canvas) {
            this._canvas = canvas;
        }
        Renderer.prototype.init = function (info) {
            this._canvas.width = info.width;
            this._canvas.height = info.height;
            this._context = this._canvas.getContext('2d');
            var img = this._img = this._context.createImageData(info.width, info.height);
            var rgba = img.data;
            for (var y = 0; y < img.height; y += 2) {
                var p0 = y * img.width;
                var p1 = p0 + img.width;
                for (var x = 0; x < img.width; x += 2) {
                    rgba[(p0 + x) * 4 + 3] =
                        rgba[(p0 + x) * 4 + 7] =
                            rgba[(p1 + x) * 4 + 3] =
                                rgba[(p1 + x) * 4 + 7] = 255;
                }
            }
        };
        Renderer.prototype.draw = function (frame) {
            var start = Date.now();
            var img = this._img;
            var rgba = img.data;
            for (var y = 0; y < img.height; y += 2) {
                var p0 = y * img.width;
                var p1 = p0 + img.width;
                var p4 = p0 / 4;
                for (var x = 0; x < img.width; x += 2) {
                    var y0 = 1.164 * (frame.y[p0 + x] - 16);
                    var y1 = 1.164 * (frame.y[p0 + x + 1] - 16);
                    var y2 = 1.164 * (frame.y[p1 + x] - 16);
                    var y3 = 1.164 * (frame.y[p1 + x + 1] - 16);
                    var u = frame.u[p4 + x / 2], v = frame.v[p4 + x / 2];
                    var t0 = 1.596 * (v - 128);
                    var t1 = -0.391 * (u - 128) - 0.813 * (v - 128);
                    var t2 = 2.018 * (u - 128);
                    var p2 = (p0 + x) * 4;
                    var p3 = (p1 + x) * 4;
                    rgba[p2] = y0 + t0;
                    rgba[p2 + 1] = y0 + t1;
                    rgba[p2 + 2] = y0 + t2;
                    rgba[p2 + 4] = y1 + t0;
                    rgba[p2 + 5] = y1 + t1;
                    rgba[p2 + 6] = y1 + t2;
                    rgba[p3] = y2 + t0;
                    rgba[p3 + 1] = y2 + t1;
                    rgba[p3 + 2] = y2 + t2;
                    rgba[p3 + 4] = y3 + t0;
                    rgba[p3 + 5] = y3 + t1;
                    rgba[p3 + 6] = y3 + t2;
                }
            }
            this._context.putImageData(img, 0, 0);
        };
        return Renderer;
    })();
</script>

<script>
    var scene = new THREE.Scene();

    var renderer = new THREE.WebGLRenderer();
    renderer.setSize(400, 286);
    renderer.setClearColor(new THREE.Color(0xaaaaaa));
    document.getElementById('ego-3dview').appendChild(renderer.domElement);
    document.getElementById('ego-3dview').style.visibility = "hidden";

    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );
    camera.position.y = 5;
    camera.position.z = 5;
    camera.lookAt (new THREE.Vector3(0, 0, 0));
    scene.add (camera);


    var controls = new THREE.OrbitControls(camera, renderer.domElement);


    var pointLight = new THREE.PointLight(0xffffff);
    pointLight.position.set (0, 20, 20);
    scene.add (pointLight);
    
    var ambientLight = new THREE.AmbientLight (0xaaaaaa);
    scene.add(ambientLight);


    var gridXZ = new THREE.GridHelper(50, 50, 0xff0000, 0xffffff);
    scene.add(gridXZ);


    // Point Cloud for VLP16:
    {
        var pointMaterial = new THREE.PointsMaterial({
            size: 0.02,
            opacity: 1,
            vertexColors: THREE.VertexColors
        });

        var geometry_pointcloud_vlp16 = new THREE.BufferGeometry();
        var MAX_POINTS_vlp16 = 63000;

        var positions_vlp16 = new Float32Array(MAX_POINTS_vlp16 * 3); // 3 vertices per point
        positions_vlp16.fill(0);
        geometry_pointcloud_vlp16.addAttribute('position', new THREE.BufferAttribute(positions_vlp16, 3));

        var colors_vlp16 = new Float32Array(MAX_POINTS_vlp16 * 3); // RGB per point
        colors_vlp16.fill(0);
        geometry_pointcloud_vlp16.addAttribute('color', new THREE.BufferAttribute(colors_vlp16, 3));

        var particles_pointcloud_vlp16 = new THREE.Points( geometry_pointcloud_vlp16, pointMaterial );
        scene.add( particles_pointcloud_vlp16 );
    }

    // Point Cloud for HDL32e_12 layers:
    {
        var pointMaterial = new THREE.PointsMaterial({
            size: 0.02,
            opacity: 1,
            vertexColors: THREE.VertexColors
        });

        var geometry_pointcloud_hdl32e_12 = new THREE.BufferGeometry();
        var MAX_POINTS_hdl32e_12 = 63000;
        var positions_hdl32e_12 = new Float32Array(MAX_POINTS_hdl32e_12 * 3); // 3 vertices per point
        positions_hdl32e_12.fill(0);
        geometry_pointcloud_hdl32e_12.addAttribute('position', new THREE.BufferAttribute(positions_hdl32e_12, 3));

        var colors_hdl32e_12 = new Float32Array(MAX_POINTS_hdl32e_12 * 3); // RGB per point
        colors_hdl32e_12.fill(0);
        geometry_pointcloud_hdl32e_12.addAttribute('color', new THREE.BufferAttribute(colors_hdl32e_12, 3));

        var particles_pointcloud_hdl32e_12 = new THREE.Points( geometry_pointcloud_hdl32e_12, pointMaterial );
        scene.add( particles_pointcloud_hdl32e_12 );
    }

    // Point Cloud for HDL32e_11 layers:
    {
        var pointMaterial = new THREE.PointsMaterial({
            size: 0.02,
            opacity: 1,
            vertexColors: THREE.VertexColors
        });

        var geometry_pointcloud_hdl32e_11 = new THREE.BufferGeometry();
        var MAX_POINTS_hdl32e_11 = 63000;
        var positions_hdl32e_11 = new Float32Array(MAX_POINTS_hdl32e_11 * 3); // 3 vertices per point
        positions_hdl32e_11.fill(0);
        geometry_pointcloud_hdl32e_11.addAttribute('position', new THREE.BufferAttribute(positions_hdl32e_11, 3));

        var colors_hdl32e_11 = new Float32Array(MAX_POINTS_hdl32e_11 * 3); // RGB per point
        colors_hdl32e_11.fill(0);
        geometry_pointcloud_hdl32e_11.addAttribute('color', new THREE.BufferAttribute(colors_hdl32e_11, 3));

        var particles_pointcloud_hdl32e_11 = new THREE.Points( geometry_pointcloud_hdl32e_11, pointMaterial );
        scene.add( particles_pointcloud_hdl32e_11 );
    }

    // Point Cloud for HDL32e_9 layers:
    {
        var pointMaterial = new THREE.PointsMaterial({
            size: 0.02,
            opacity: 1,
            vertexColors: THREE.VertexColors
        });

        var geometry_pointcloud_hdl32e_9 = new THREE.BufferGeometry();
        var MAX_POINTS_hdl32e_9 = 63000;
        var positions_hdl32e_9 = new Float32Array(MAX_POINTS_hdl32e_9 * 3); // 3 vertices per point
        positions_hdl32e_9.fill(0);
        geometry_pointcloud_hdl32e_9.addAttribute('position', new THREE.BufferAttribute(positions_hdl32e_9, 3));

        var colors_hdl32e_9 = new Float32Array(MAX_POINTS_hdl32e_9 * 3); // RGB per point
        colors_hdl32e_9.fill(0);
        geometry_pointcloud_hdl32e_9.addAttribute('color', new THREE.BufferAttribute(colors_hdl32e_9, 3));

        var particles_pointcloud_hdl32e_9 = new THREE.Points( geometry_pointcloud_hdl32e_9, pointMaterial );
        scene.add( particles_pointcloud_hdl32e_9 );
    }

    var animate = function () {
        requestAnimationFrame( animate );
        renderer.render(scene, camera);
    };

    animate();
</script>


<script>
var gaugePS = new RadialGauge({
    renderTo: 'speed',
   units: "kph",
    minValue: 0,
    maxValue: 220,
    majorTicks: [
        "0",
        "20",
        "40",
        "60",
        "80",
        "100",
        "120",
        "140",
        "160",
        "180",
        "200",
        "220"
    ],
    minorTicks: 2,
    strokeTicks: true,
    highlights: [
        {
            "from": 160,
            "to": 220,
            "color": "rgba(200, 50, 50, .75)"
        }
    ],
    colorPlate: "#fff",
    borderShadowWidth: 0,
    borders: false,
    needleType: "arrow",
    needleWidth: 2,
    needleCircleSize: 7,
    needleCircleOuter: true,
    needleCircleInner: false,
    animationDuration: 1500,
    animationRule: "linear"
});
gaugePS.draw();
</script>


<script>
var map = new maptalks.Map("map",{
    center : [-118.150127,33.779397],
    pitch : 0,
    bearing : 0,
    zoom : 17,
    centerCross: true,
    attribution : {
      'content' : '<span style="padding:4px"><font size=1>&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attributions">CARTO</a></font> </span>'
    },
// a custom version of default web-mercator spatial reference
        // map's spatial reference definition
        spatialReference : {
          projection : 'EPSG:3857', // geo projection, can be a string or a function
          resolutions : [           // map's zoom levels and resolutions
            156543.03392804097,
            78271.51696402048,
            9135.75848201024,
            19567.87924100512,
            9783.93962050256,
            4891.96981025128,
            2445.98490512564,
            1222.99245256282,
            611.49622628141,
            305.748113140705,
            152.8740565703525,
            76.43702828517625,
            38.21851414258813,
            19.109257071294063,
            9.554628535647032,
            4.777314267823516,
            2.388657133911758,
            1.194328566955879,
            0.5971642834779395,
            0.29858214173896974,
            0.1492910709,
            0.07464553543,
            0.03732276771
          ],
          fullExtent : {         // map's full extent
            'top': 6378137 * Math.PI,
            'left': -6378137 * Math.PI,
            'bottom': -6378137 * Math.PI,
            'right': 6378137 * Math.PI
          }
        },
        baseLayer : new maptalks.TileLayer('base',{
          urlTemplate: 'http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',
          subdomains: ['a','b','c','d'],
          tileSystem : [1, -1, -20037508.34, 20037508.34], // tile system
          minZoom : 1,
          maxZoom : 23
        })
});
</script>


<script>
    var GL_position_index_vlp16 = 0;
    var GL_position_index_hdl32e_12 = 0;
    var GL_position_index_hdl32e_11 = 0;
    var GL_position_index_hdl32e_9 = 0;
    // Setup look-up table for interleaved vertical layers.
    var verticalAngles16 = [-15.0, -13.0, -11.0, -9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0];
    var verticalAngles12 = [-30.67, -29.33, -25.33, -21.32, -17.32, -13.31, -9.31, -5.3, -1.3, 2.71, 6.71, 10.72];
    var verticalAngles11 = [-28.0, -26.66, -22.66, -18.65, -14.65, -10.64, -6.64, -2.63, 1.37, 5.38, 9.38];
    var verticalAngles9 = [-23.99, -19.99, -15.98, -11.98, -7.97, -3.97, 0.04, 4.04, 8.05];

    var recording = false;

    var __libcluon = libcluon();

    function getResourceFrom(url) {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", url, false /*asynchronous request*/);
        xmlHttp.send(null);
        return xmlHttp.responseText;
    }

    var ws;
    if ("WebSocket" in window) {
        ws = new WebSocket("ws://" + window.location.host + "/", "od4");
        ws.binaryType = 'arraybuffer';

        ws.onopen = function() {
{{#if livePage}}
            document.getElementById("connectionStatusSymbol").style.color = "#3CB371";
            document.getElementById("connectionStatusText").style.color = "#3CB371";
            document.getElementById("connectionStatusText").innerHTML = "connected";
{{/if}}
{{#if useExternallySuppliedODVDFile}}
            var odvdFile = "external.odvd";
{{else}}
            var odvdFile = "opendlv-standard-message-set-v0.9.6.odvd";
{{/if}}
            var odvd = getResourceFrom(odvdFile);
            console.log("Loaded " + __libcluon.setMessageSpecification(odvd) + " messages from specification '" + odvdFile + "'.");
        };

        var vpxDecoderInitialized = false;
        var vpxRenderer = undefined;
        var vpxDecoder = new Decoder('js/vpx_decoder.js');

        var mapOfMessages = {};
        document.getElementById('messagesElement').style.visibility = "hidden";
        var $tableMessagesOverview = $('#table-messages-overview');
        var showWarningForSenderStampNotZero = true;
        var envelopeCounter = 0;
        var currentTimeStamp = 0;
        ws.onmessage = function(evt) {
            // This method will pass an OpenDaVINCI container to libcluon to parse it into a JSON object using the provided message specification.
            var data = JSON.parse(__libcluon.decodeEnvelopeToJSON(evt.data));
            envelopeCounter++;

            if ( (data.dataType > 0) && (data.dataType != 9 /*Ignore PlayerCommand*/) && (data.dataType != 10 /*Ignore PlayerStatus*/) ) {
                currentTimeStamp = data.sampleTimeStamp.seconds * 1000 * 1000 + data.sampleTimeStamp.microseconds;

                var date = new Date(currentTimeStamp/1000);
                var year = date.getFullYear();
                var month = "0" + (date.getMonth()+1);
                var day = "0" + date.getDate();
                var hours = date.getHours();
                var minutes = "0" + date.getMinutes();
                var seconds = "0" + date.getSeconds();

                var formattedTime = year + '-' + month.substr(-2) + '-' + day.substr(-2) + ' ' + hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
                document.getElementById("containerTimeStamp").innerHTML = formattedTime;
                document.getElementById("containerTimeStampUnix").innerHTML = Math.floor(currentTimeStamp/1000) + " ms";

                // Do book keeping of envelopes.
                var informationAboutEnvelopesKey = data.dataType + "/" + data.senderStamp;
                if (!(informationAboutEnvelopesKey in mapOfMessages)) {
                    mapOfMessages[informationAboutEnvelopesKey] = { sampleTimeStamp: 0,
                                                                    envelope: {} };
                }
                var informationAboutEnvelopes = mapOfMessages[informationAboutEnvelopesKey];
                informationAboutEnvelopes.sampleTimeStamp = currentTimeStamp;
                informationAboutEnvelopes.envelope = data;
                mapOfMessages[informationAboutEnvelopesKey] = informationAboutEnvelopes;

                // Update message details.
                if ( userIsSteppingForward || (0 == (envelopeCounter % 100)) ) {
                    var $tableMessagesDetails = $('#table-messages-details');
                    $tableMessagesDetails.empty(); // empty is more explicit

                    var $row = $('<tr>').appendTo($tableMessagesDetails);
                    $('<th>').text("ID").appendTo($row);
                    $('<th>').text("senderStamp").appendTo($row);
                    $('<th>').text("message name").appendTo($row);
                    $('<th>').text("sample timestamp [µs]").appendTo($row);
                    $('<th>').text("signal(s)").appendTo($row);

                    for (var k in mapOfMessages) {
                        var $row = $('<tr>').appendTo($tableMessagesDetails);
                        $('<td>').text(mapOfMessages[k].envelope.dataType).appendTo($row);
                        $('<td>').text(mapOfMessages[k].envelope.senderStamp).appendTo($row);
                        $('<td>').text(Object.keys(mapOfMessages[k].envelope)[5]).appendTo($row);
                        $('<td>').text(mapOfMessages[k].sampleTimeStamp).appendTo($row);
                        var msg = mapOfMessages[k].envelope[Object.keys(mapOfMessages[k].envelope)[5]];

                        var tmp = "";
                        for (var j in msg) {
                            var v = msg[j];
                            tmp += j;
                            if ((typeof msg[j]) == 'string') {
                                if (v.length > 10) {
                                    v = " (base64) " + v.substr(0, 10) + "...";
                                }
                                else {
                                    v = window.atob(v);
                                }
                            }
                            tmp += ": " + v + "<br>";
                        }
                        $('<td>').html(tmp).appendTo($row);
                    }
                }
                if ( 0 == (envelopeCounter % 100)) {
                    document.getElementById('messagesElement').style.visibility = "visible";

                    $tableMessagesOverview.empty(); // empty is more explicit

                    for (var k in mapOfMessages) {
                        var $row = $('<tr>').appendTo($tableMessagesOverview);

                        var $msg = $('<td>').text(Object.keys(mapOfMessages[k].envelope)[5]);

//                        var $qty = $('<td>')
//                            .text(mapOfMessages[k])
//                            .appendTo($msg);

                        $msg.appendTo($row);
                    }
                }
            }

            if ( (data.dataType > 0) && (data.senderStamp > 0) ) {
                if (showWarningForSenderStampNotZero) {
                    showWarningForSenderStampNotZero = false;
                    alert("Warning! OpenDLV Vehicle View does not support multiple streams for the same data type yet.");
                }
                return;
            }

{{#if playbackPage}}
            if (data.dataType == 10 /*PlayerStatus*/) {
                var total = data.cluon_data_PlayerStatus.numberOfEntries;
                var current = data.cluon_data_PlayerStatus.currentEntryForPlayback;
                if (total > 0) {
                  var slider = document.getElementById("playbackrange");
                  slider.value = current * 100 / total;
                }
                return;
            }
{{/if}}
            if (data.dataType == 1046) {
                gaugePS.value = data.opendlv_proxy_GroundSpeedReading.groundSpeed * 3.6;
                return;
            }
            if (data.dataType == 19) {
                var c = [data.opendlv_proxy_GeodeticWgs84Reading.longitude, data.opendlv_proxy_GeodeticWgs84Reading.latitude];
                map.setCenter(c);
                return;
            }
            if (data.dataType == 1055) {
                // Mapping function to make wide chars to regular bytes.
                strToAB = str =>
                 new Uint8Array(str.split('')
                   .map(c => c.charCodeAt(0))).buffer;

                var frameFormat = window.atob(data.opendlv_proxy_ImageReading.fourcc);
                if ("h264" == frameFormat) {
                    if (!window.player) {
                        // Create player and renderer.
                        window.player = new Player({useWorker: true,
                                                    webgl: 'auto',
                                                    size: {
                                                        width: data.opendlv_proxy_ImageReading.width,
                                                        height: data.opendlv_proxy_ImageReading.height
                                                    }
                                                   });
                        // Add element to page.
                        var playerElement = document.getElementById("canvasForH264Frame");
                        playerElement.appendChild(window.player.canvas);
                        playerElement.style.visibility = "visible";
                    }
                    if (window.player) {
                        // Render frame.
                        window.player.decode(new Uint8Array(strToAB(window.atob(data.opendlv_proxy_ImageReading.data))));
                    }
                }
                if ( ("VP80" == frameFormat) ||
                     ("VP90" == frameFormat) ) {
                    var vpxConfiguration = { 'version': (("VP80" == frameFormat) ? 8 : 9) };

                    if (undefined == vpxRenderer) {
                        vpxRenderer = new Renderer(document.getElementById('canvasForVPXFrame'));
                        vpxRenderer.init({
                            width: data.opendlv_proxy_ImageReading.width,
                            height: data.opendlv_proxy_ImageReading.height
                        });
                    }

                    if (undefined != vpxRenderer) {
                        document.getElementById('canvasForVPXFrame').style.visibility = "visible";

                        var packet = { data: strToAB(window.atob(data.opendlv_proxy_ImageReading.data)),
                                       frame_type: 255 };

                        if (!vpxDecoderInitialized) {
                            vpxDecoderInitialized = true;

                            vpxDecoder.setup(vpxConfiguration, packet).then(function (frame) {
                            if (frame.data) {
                                vpxRenderer.draw(frame);
                            }
                            }, function (e) {
                                console.log('failed: decode', e);
                            });
                        }
                        else {
                            vpxDecoder.decode(packet).then(function (frame) {
                            if (frame.data) {
                                vpxRenderer.draw(frame);
                            }
                            }, function (e) {
                                console.log('failed: decode', e);
                            });
                        }
                    }
                }
                return;
            }
            if (data.dataType == 49) {
                document.getElementById('ego-3dview').style.visibility = "visible";
                // CompactPointCloud
                var distances = window.atob(data.opendlv_proxy_PointCloudReading.distances);

                var numberOfBitsForIntensity = data.opendlv_proxy_PointCloudReading.numberOfBitsForIntensity;
                var startAzimuth = data.opendlv_proxy_PointCloudReading.startAzimuth;
                var endAzimuth = data.opendlv_proxy_PointCloudReading.endAzimuth;
                var entriesPerAzimuth = data.opendlv_proxy_PointCloudReading.entriesPerAzimuth;
                var numberOfPoints = distances.length / 2;
                var numberOfAzimuths = numberOfPoints / entriesPerAzimuth;
                var azimuthIncrement = (endAzimuth - startAzimuth) / numberOfAzimuths;

                var GL_positions_vlp16 = particles_pointcloud_vlp16.geometry.attributes.position.array;
                var GL_colors_vlp16 = particles_pointcloud_vlp16.geometry.attributes.color.array;

                var GL_positions_hdl32e_12 = particles_pointcloud_hdl32e_12.geometry.attributes.position.array;
                var GL_colors_hdl32e_12 = particles_pointcloud_hdl32e_12.geometry.attributes.color.array;

                var GL_positions_hdl32e_11 = particles_pointcloud_hdl32e_11.geometry.attributes.position.array;
                var GL_colors_hdl32e_11 = particles_pointcloud_hdl32e_11.geometry.attributes.color.array;

                var GL_positions_hdl32e_9 = particles_pointcloud_hdl32e_9.geometry.attributes.position.array;
                var GL_colors_hdl32e_9 = particles_pointcloud_hdl32e_9.geometry.attributes.color.array;

                // VLP16 sends 16 layers,
                if (16 == entriesPerAzimuth) {
                    GL_positions_vlp16.fill(0);
                    GL_colors_vlp16.fill(0);
                    GL_position_index_vlp16 = 0;
                }
                else if (12 == entriesPerAzimuth) {
                    // HDL32e sends the sequence 12, 11, 9 layers.
                    GL_positions_hdl32e_12.fill(0);
                    GL_colors_hdl32e_12.fill(0);
                    GL_position_index_hdl32e_12 = 0;
                }
                else if (11 == entriesPerAzimuth) {
                    GL_positions_hdl32e_11.fill(0);
                    GL_colors_hdl32e_11.fill(0);
                    GL_position_index_hdl32e_11 = 0;
                }
                else if (9 == entriesPerAzimuth) {
                    GL_positions_hdl32e_9.fill(0);
                    GL_colors_hdl32e_9.fill(0);
                    GL_position_index_hdl32e_9 = 0;
                }

                var index = 0;
                var azimuth = startAzimuth;
                for (var azimuthIndex = 0; azimuthIndex < numberOfAzimuths; azimuthIndex++) {
                    for (var sensorIndex = 0; sensorIndex < entriesPerAzimuth; sensorIndex++) {
                        var verticalAngle = 0;
                        if (16 == entriesPerAzimuth) {
                            verticalAngle = verticalAngles16[sensorIndex];
                        }
                        else if (12 == entriesPerAzimuth) {
                            verticalAngle = verticalAngles12[sensorIndex];
                        }
                        else if (11 == entriesPerAzimuth) {
                            verticalAngle = verticalAngles11[sensorIndex];
                        }
                        else if (9 == entriesPerAzimuth) {
                            verticalAngle = verticalAngles9[sensorIndex];
                        }

                        var byte0 = distances.charCodeAt(index++);
                        var byte1 = distances.charCodeAt(index++);
                        var distance = ( ((0xff & byte0) << 8) | (0xff & byte1) );

                        var r = 0;
                        var g = 0;
                        var b = 1.0;

                        // Extract intensity.
                        if (0 < numberOfBitsForIntensity) {
                            var MASK = ((~(0xFFFF >> numberOfBitsForIntensity))&0xFFFF); // restrict to uint16.
                            var extractedIntensity = distance & MASK;
                            extractedIntensity = extractedIntensity >> (16 - numberOfBitsForIntensity);
                            var intensityMaxValue = Math.round(Math.exp(Math.log(2) * numberOfBitsForIntensity) - 1);
                            var intensity = extractedIntensity / intensityMaxValue;

                            if ( (intensity > 1.0) || (0 > intensity) ) {
                                intensity = 0.5;
                            }

                            // Four color levels: blue, green, yellow, red from low intensity to high intensity
                            if (intensity < 0.25 + 1e-7) {
                                r = 0;
                                g = 0.5 + intensity * 2.0;
                                b = 1;
                            } else if (intensity > 0.25 && intensity < 0.5 + 1e-7) {
                                r = 0;
                                g = 0.5 + intensity * 2.0;
                                b = 0.5;
                            } else if (intensity > 0.5 && intensity < 0.75 + 1e-7) {
                                r = 1;
                                g = 0.75 + intensity;
                                b = 0;
                            } else {
                                r = 0.55 + intensity;
                                g = 0;
                                b = 0;
                            }

                            // Remove intensity from distance.
                            distance &= (0xFFFF >> numberOfBitsForIntensity);
                        }

                        distance /= 100.0;

                        if (distance > 1.0) {
                            var xyDistance = distance * Math.cos(verticalAngle * Math.PI/180.0);
                            var x = xyDistance * Math.sin(azimuth * Math.PI/180.0);
                            var y = xyDistance * Math.cos(azimuth * Math.PI/180.0);
                            var z = distance * Math.sin(verticalAngle * Math.PI/180.0);

                            if (16 == entriesPerAzimuth) {
                                if (GL_position_index_vlp16 < MAX_POINTS_vlp16-3) {
                                    GL_positions_vlp16[GL_position_index_vlp16] = x;
                                    GL_colors_vlp16[GL_position_index_vlp16] = r;
                                    GL_position_index_vlp16++;

                                    GL_positions_vlp16[GL_position_index_vlp16] = z;
                                    GL_colors_vlp16[GL_position_index_vlp16] = g;
                                    GL_position_index_vlp16++;

                                    GL_positions_vlp16[GL_position_index_vlp16] = -y;
                                    GL_colors_vlp16[GL_position_index_vlp16] = b;
                                    GL_position_index_vlp16++;
                                }

                            }
                            else if (12 == entriesPerAzimuth) {
                                if (GL_position_index_hdl32e_12 < MAX_POINTS_hdl32e_12-3) {
                                    GL_positions_hdl32e_12[GL_position_index_hdl32e_12] = x;
                                    GL_colors_hdl32e_12[GL_position_index_hdl32e_12] = r;
                                    GL_position_index_hdl32e_12++;

                                    GL_positions_hdl32e_12[GL_position_index_hdl32e_12] = z;
                                    GL_colors_hdl32e_12[GL_position_index_hdl32e_12] = g;
                                    GL_position_index_hdl32e_12++;

                                    GL_positions_hdl32e_12[GL_position_index_hdl32e_12] = -y;
                                    GL_colors_hdl32e_12[GL_position_index_hdl32e_12] = b;
                                    GL_position_index_hdl32e_12++;
                                }
                            }
                            else if (11 == entriesPerAzimuth) {
                                if (GL_position_index_hdl32e_11 < MAX_POINTS_hdl32e_11-3) {
                                    GL_positions_hdl32e_11[GL_position_index_hdl32e_11] = x;
                                    GL_colors_hdl32e_11[GL_position_index_hdl32e_11] = r;
                                    GL_position_index_hdl32e_11++;

                                    GL_positions_hdl32e_11[GL_position_index_hdl32e_11] = z;
                                    GL_colors_hdl32e_11[GL_position_index_hdl32e_11] = g;
                                    GL_position_index_hdl32e_11++;

                                    GL_positions_hdl32e_11[GL_position_index_hdl32e_11] = -y;
                                    GL_colors_hdl32e_11[GL_position_index_hdl32e_11] = b;
                                    GL_position_index_hdl32e_11++;
                                }
                            }
                            else if (9 == entriesPerAzimuth) {
                                if (GL_position_index_hdl32e_9 < MAX_POINTS_hdl32e_9-3) {
                                    GL_positions_hdl32e_9[GL_position_index_hdl32e_9] = x;
                                    GL_colors_hdl32e_9[GL_position_index_hdl32e_9] = r;
                                    GL_position_index_hdl32e_9++;

                                    GL_positions_hdl32e_9[GL_position_index_hdl32e_9] = z;
                                    GL_colors_hdl32e_9[GL_position_index_hdl32e_9] = g;
                                    GL_position_index_hdl32e_9++;

                                    GL_positions_hdl32e_9[GL_position_index_hdl32e_9] = -y;
                                    GL_colors_hdl32e_9[GL_position_index_hdl32e_9] = b;
                                    GL_position_index_hdl32e_9++;
                                }
                            }
                        }
                    }
                    azimuth += azimuthIncrement;
                }

                // Trigger update
                if (16 == entriesPerAzimuth) {
                    particles_pointcloud_vlp16.geometry.attributes.position.needsUpdate = true;
                    particles_pointcloud_vlp16.geometry.attributes.color.needsUpdate = true;
                }
                else if (12 == entriesPerAzimuth) {
                    particles_pointcloud_hdl32e_12.geometry.attributes.position.needsUpdate = true;
                    particles_pointcloud_hdl32e_12.geometry.attributes.color.needsUpdate = true;
                }
                else if (11 == entriesPerAzimuth) {
                    particles_pointcloud_hdl32e_11.geometry.attributes.position.needsUpdate = true;
                    particles_pointcloud_hdl32e_11.geometry.attributes.color.needsUpdate = true;
                }
                else if (9 == entriesPerAzimuth) {
                    particles_pointcloud_hdl32e_9.geometry.attributes.position.needsUpdate = true;
                    particles_pointcloud_hdl32e_9.geometry.attributes.color.needsUpdate = true;
                }
                return;
            }
        };

        ws.onclose = function() {
{{#if livePage}}
            document.getElementById("connectionStatusText").style.color = "#555";
            document.getElementById("connectionStatusSymbol").style.color = "#555";
            document.getElementById("connectionStatusText").innerHTML = "disconnected";
{{/if}}
        };

    }
    else {
        // The browser doesn't support WebSocket
        console.log("WebSocket NOT supported by your Browser!");
    }

{{#if livePage}}
    $(document).ready(function(){
        $('body').on('click', 'button#record', function() {
            recording = !recording;
            if (recording) {
                $('button#record').css('color', '#D00');
                ws.send("{ \"record\": true }", { binary: false });
            }
            else {
                $('button#record').css('color', '#555');
                ws.send("{ \"record\": false }", { binary: false });
            }
        });
    });
{{/if}}

    function clock() {
        var date = new Date(new Date().getTime());
        var year = date.getFullYear();
        var month = "0" + (date.getMonth()+1);
        var day = "0" + date.getDate();
        var hours = date.getHours();
        var minutes = "0" + date.getMinutes();
        var seconds = "0" + date.getSeconds();

        var formattedTime = year + '-' + month.substr(-2) + '-' + day.substr(-2) + ' ' + hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);

        $('#currentTime').text(formattedTime);
        window.setTimeout(clock, 500);
    }
    window.setTimeout(clock, 500);

    var userIsSteppingForward = false;
{{#if playbackPage}}
    function endReplay(goLive) {
        fetch('/endreplay', { method: 'post',
                            headers: {
                                'Accept': 'application/json, text/plain, */*',
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({endReplay: true})
                           }
        )
        .then(function(response) {
            if (response.ok) {
                if (goLive) {
                    window.location = "/";
                }
                else {
                    window.location = "/recordings";
                }
                return;
            }
            throw new Error('Request failed.');
            })
        .catch(function(error) {
            console.log(error);
        });
    }

    var buttonPlayState = "play";
    function remotePlayer(value) {
        var commandValue = 0;
        if ('playButton' == value) {
            userIsSteppingForward = false;
            if ("play" == buttonPlayState) {
                buttonPlayState = "pause";
                document.getElementById("playButton").className = "fas fa-play";
                commandValue = 2;
            }
            else if ("pause" == buttonPlayState) {
                buttonPlayState = "play";
                document.getElementById("playButton").className = "fas fa-pause";
                commandValue = 1;
            }
        }
        if ('stepForwardButton' == value) {
            userIsSteppingForward = true;
            buttonPlayState = "pause";
            document.getElementById("playButton").className = "fas fa-play";
            commandValue = 4;
        }

        if ('replayStartOver' == value) {
            // Restart playback.
            buttonPlayState = "play";
            document.getElementById("playButton").className = "fas fa-pause";
            commandValue = 1;

            // Send seekTo beginning function.
            setTimeout(function() {
                // Seek to beginning.
                var remotePlayerJSON = "{\"command\":3,\"seekTo\":0}";
                var output = __libcluon.encodeEnvelopeFromJSONWithoutTimeStamps(remotePlayerJSON, 9 /* message identifier */, 0  /* sender stamp */);
                var commandJSON = "{\"remoteplayback\":" + "\"" + window.btoa(output) + "\"" + "}";

                ws.send(commandJSON);
                var slider = document.getElementById("playbackrange");
                slider.value = 1;
            }, 300);
        }

        var remotePlayerJSON = "{\"command\":" + commandValue + "}";

        var output = __libcluon.encodeEnvelopeFromJSONWithoutTimeStamps(remotePlayerJSON, 9 /* message identifier */, 0  /* sender stamp */);

//        strToAB = str =>
//          new Uint8Array(str.split('')
//            .map(c => c.charCodeAt(0))).buffer;

// Instead of sending the raw bytes, we encapsulate them into a JSON object.
//        ws.send(strToAB(output), { binary: true });

        var commandJSON = "{\"remoteplayback\":" + "\"" + window.btoa(output) + "\"" + "}";
        ws.send(commandJSON);
    }

    window.addEventListener("load", function() {
        var slider = document.getElementById("playbackrange");
        slider.addEventListener("change", function() {
            remotePlayerJSON = "{\"command\":3,\"seekTo\":" + (this.value/100) + "}";
            console.log(remotePlayerJSON);

            var output = __libcluon.encodeEnvelopeFromJSONWithoutTimeStamps(remotePlayerJSON, 9 /* message identifier */, 0  /* sender stamp */);

//            strToAB = str =>
//              new Uint8Array(str.split('')
//                .map(c => c.charCodeAt(0))).buffer;

// Instead of sending the raw bytes, we encapsulate them into a JSON object.
//            ws.send(strToAB(output), { binary: true });

            var commandJSON = "{\"remoteplayback\":" + "\"" + window.btoa(output) + "\"" + "}";
            ws.send(commandJSON);
        });
    });
{{/if}}

    window.addEventListener("beforeunload", function (e) {
{{#if livePage}}
        var confirmationMessage = "Recording is ongoing that will be canceled when leaving this page.";
        if (recording) {
            (e || window.event).returnValue = confirmationMessage; //Gecko + IE
            return confirmationMessage;                            //Webkit, Safari, Chrome
        }
{{/if}}
{{#if playbackPage}}
        fetch('/endreplay', { method: 'post',
                            headers: {
                                'Accept': 'application/json, text/plain, */*',
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({endReplay: true})
                           }
        )
        .then(function(response) {
            if (response.ok) {
                return;
            }
            throw new Error('Request failed.');
            })
        .catch(function(error) {
            console.log(error);
        });
{{/if}}
    });
</script>


</body>
</html>

