<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <link type="text/css" rel="stylesheet" href="css/all.css"/>

        <style>
            * {
              box-sizing: border-box;
            }

            .background-image {
              background-image: url('background.jpg');
              background-size: cover;
              display: block;
              filter: blur(5px);
              -webkit-filter: blur(5px);
              height: 800px;
              left: 0;
              position: fixed;
              right: 0;
              z-index: 1;
            }

            .content {
              background: rgba(255, 255, 255, 0.35);
              border-radius: 3px;
              box-shadow: 0 1px 5px rgba(0, 0, 0, 0.25);
              font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
              top: 10px;
              left: 0;
              position: fixed;
              margin-left: 20px;
              margin-right: 20px;
              right: 0;
              z-index: 2;
              padding: 0 10px;
            }

            .divScroll {
                overflow:scroll;
                height:600px;
                width:90%;
            }

            #drop_zone {
              border: 2px dashed darkgray;
              width:  400px;
              height: 90px;
            }
        </style>

        <script type="text/javascript" src="js/libcluon-0.0.107.js"></script>
    </head>

<div class="background-image"></div>

<div class="content">

<div class="divScroll">

<center>
<p><button id="back" type="button" class="fas fa-arrow-left" style="font-size:20px;color:#555;padding: 5px 30px;" onclick="location.href='..'"></button></p>
</center>

<center>
<div id="drop_zone">
    <p>Optional: Drag and drop a message specification file (.odvd) here to be used instead of the OpenDLV Standard Message Set when creating the .csv export.</p>
</div>
{{#if hasODVD}}
<button id="deleteExternallySuppliedODVDFile" type="button" class="far fa-trash-alt" style="font-size:20px;color:#555;padding: 5px 30px;" onclick="deleteExternallySuppliedODVDFile()" title="&nbsp;Remove provided message specification file.">Remove provided message specification file.</button>
{{/if}}
</center>

<script>
    function handleDragOver(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        evt.dataTransfer.dropEffect = 'copy';
    }

    function handleFileSelect(evt) {
        evt.stopPropagation();
        evt.preventDefault();

        var files = evt.dataTransfer.files; // FileList object.

        // files is a FileList of File objects. List some properties.
        var output = [];
        if (1 != files.length) {
            alert("Cannot handle more than one message specification file (.odvd).");
        }
        else if (1024*1024 < files[0].size) {
            alert("Cannot handle message specification files (.odvd) that are larger than 1MB.");
        }
        else {
            var reader = new FileReader();

            reader.onload = function(e) {
                var content = reader.result;
                var __libcluon = libcluon();
                var res = "0";
                try {
                    // Always add the messages to control the player.
                    var playerMessages = `

message cluon.data.PlayerCommand [id = 9] {
    uint8 command [id = 1]; // 0 = nothing, 1 = play, 2 = pause, 3 = seekTo, 4 = step
    float seekTo [id = 2];
}

message cluon.data.PlayerStatus [id = 10] {
    uint8 state [id = 1]; // 0 = unknown, 1 = loading file, 2 = playback
    uint32 numberOfEntries [id = 2];
    uint32 currentEntryForPlayback [id = 3];
}
`;
                    content += playerMessages;
                    res = __libcluon.setMessageSpecification(content);
                }
                catch (e) {
                    res = "0";
                }

                if ("0" != res) {
                    if (confirm("Do you want to upload the provided message specification file?")) {
                        fetch('/provideodvdfile', { method: 'post',
                                            headers: {
                                                'Accept': 'application/json, text/plain, */*',
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({odvd: content})
                                           }
                        )
                        .then(function(response) {
                            if (response.ok) {
                                location.reload();
                                return;
                            }
                            throw new Error('Request failed.');
                            })
                        .catch(function(error) {
                            console.log(error);
                        });
                    }
                }
                else {
                    alert("Provided message specification file contained " + res + " messages.");
                }
            }

            reader.readAsText(files[0]);
        }
    }

    // Connect drag-and-drop listeners.
    var dropZone = document.getElementById('drop_zone');
    dropZone.addEventListener('dragover', handleDragOver, false);
    dropZone.addEventListener('drop', handleFileSelect, false);

function deleteExternallySuppliedODVDFile() {
    if (confirm("Do you really want to remove previously provided message specification file?")) {
        fetch('/deleteodvdfile', { method: 'post',
                                   headers: {
                                       'Accept': 'application/json, text/plain, */*',
                                       'Content-Type': 'application/json'
                                   } }
        )
        .then(function(response) {
            if(response.ok) {
                location.reload();
                return;
            }
            throw new Error('Request failed.');
            })
        .catch(function(error) {
            console.log(error);
        });
    }
}
</script>

<table cellpadding="2" width="100%" id="listOfRecordings">
    <tr>
        <th>
        Actions
        </th>
        <th onclick="sortTable(1)" style="cursor: pointer;">
        Name
        </th>
        <th>
        Size
        </th>
    </tr>
{{#each recfiles}}
    <tr>
        <td align="center">
        <button id="download-rec" type="button" class="fas fa-file-download" style="font-size:20px;color:#3498DB;padding: 5px 30px;" onclick="location.href='{{filename}}'" title="Download {{name}}.">&nbsp;.rec</button>
        <button id="download-csv-{{name}}" type="button" class="far fa-file-download" style="font-size:20px;color:#3498DB;padding: 5px 30px;" onclick="convertFile('{{filename}}', '{{name}}')" title="Convert {{name}} to separate .csv files using the OpenDLV Standard Message Set and download resulting .csv files as zip file.">&nbsp;.csv</button>
{{../platform}}
{{#if ../isX64}}
        <button id="download-csvpng-{{name}}" type="button" class="far fa-file-download" style="font-size:20px;color:#3498DB;padding: 5px 30px;" onclick="convertFilePNG('{{filename}}', '{{name}}')" title="Convert {{name}} to separate .csv and .png files using the OpenDLV Standard Message Set and download resulting .csv and .png files as zip file.">&nbsp;.csv/.png</button>
{{/if}}
        <button id="playFile" type="button" class="far fa-play-circle" style="font-size:20px;color:#555;padding: 5px 30px;" onclick="replayFile('{{filename}}', '{{name}}')" title="Replay {{name}}."></button>
        <button id="deleteFile" type="button" class="far fa-trash-alt" style="font-size:20px;color:#555;padding: 5px 30px;" onclick="deleteFile('{{filename}}', '{{name}}')" title="Delete {{name}}."></button>
        </td>
        <td align="left">
        <div onclick="location.href = '../details?rec={{name}}'" onmouseover="" style="cursor: pointer;">{{name}}</div>
        </td>
        <td align="right">
        {{size}} bytes
        </td>
    </tr>
{{/each}}
</table>
</div>

<script>
// Sorting table code: https://www.w3schools.com/howto/howto_js_sort_table.asp
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("listOfRecordings");
  switching = true;
  // Set the sorting direction to ascending:
  dir = "asc"; 
  /* Make a loop that will continue until
  no switching has been done: */
  while (switching) {
    // Start by saying: no switching is done:
    switching = false;
    rows = table.getElementsByTagName("TR");
    /* Loop through all table rows (except the
    first, which contains table headers): */
    for (i = 1; i < (rows.length - 1); i++) {
      // Start by saying there should be no switching:
      shouldSwitch = false;
      /* Get the two elements you want to compare,
      one from current row and one from the next: */
      x = rows[i].getElementsByTagName("TD")[n];
      y = rows[i + 1].getElementsByTagName("TD")[n];
      /* Check if the two rows should switch place,
      based on the direction, asc or desc: */
      if (dir == "asc") {
        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
          // If so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      } else if (dir == "desc") {
        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
          // If so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /* If a switch has been marked, make the switch
      and mark that a switch has been done: */
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      // Each time a switch is done, increase this count by 1:
      switchcount ++; 
    } else {
      /* If no switching has been done AND the direction is "asc",
      set the direction to "desc" and run the while loop again. */
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
      }
    }
  }
}

function convertFile(filename, name) {
    document.getElementById('download-csv-' + name).disabled = true;
    document.getElementById('download-csv-' + name).style.color = "#555";
    document.body.style.cursor = 'wait';

    fetch('/convertrec2csv', { method: 'post',
                        headers: {
                            'Accept': 'application/json, text/plain, */*',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({recordingFileToConvert: filename, recordingFile: name })
                       }
    )
    .then(function(response) {
        if (response.ok) {
            window.location = "../" + name + ".csv.zip";
            document.getElementById('download-csv-' + name).disabled = false;
            document.getElementById('download-csv-' + name).style.color = "#3498DB";
            document.body.style.cursor = 'default';
            return;
        }
        document.body.style.cursor = 'default';

        alert("Failed to export .csv files (maybe the message specification file was incomplete?).");
        throw new Error('Request failed.');
        })
    .catch(function(error) {
        console.log(error);
    });
}

function convertFilePNG(filename, name) {
    if (confirm("Converting a .rec file into .csv/.png files can take several minutes. Do you want to continue?")) {
        document.getElementById('download-csvpng-' + name).disabled = true;
        document.getElementById('download-csvpng-' + name).style.color = "#555";
        document.body.style.cursor = 'wait';

        fetch('/convertrec2csvpng', { method: 'post',
                            headers: {
                                'Accept': 'application/json, text/plain, */*',
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({recordingFileToConvert: filename, recordingFile: name })
                           }
        )
        .then(function(response) {
            if (response.ok) {
                window.location = "../" + name + ".csv.zip";
                document.getElementById('download-csvpng-' + name).disabled = false;
                document.getElementById('download-csvpng-' + name).style.color = "#3498DB";
                document.body.style.cursor = 'default';
                return;
            }
            document.body.style.cursor = 'default';

            alert("Failed to export .csv/.png files (maybe the message specification file was incomplete?).");
            throw new Error('Request failed.');
            })
        .catch(function(error) {
            console.log(error);
        });
    }
}

function replayFile(filename, name) {
    fetch('/replayrecfile', { method: 'post',
                        headers: {
                            'Accept': 'application/json, text/plain, */*',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({recordingFileToPlay: filename})
                       }
    )
    .then(function(response) {
        if(response.ok) {
            window.location = "../playback";
            return;
        }
        throw new Error('Request failed.');
        })
    .catch(function(error) {
        console.log(error);
    });
}

function deleteFile(filename, name) {
    if (confirm("Do you really want to delete '" + name + "'?")) {
        fetch('/deleterecfile', { method: 'post',
                            headers: {
                                'Accept': 'application/json, text/plain, */*',
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({recordingFileToDelete: filename})
                           }
        )
        .then(function(response) {
            if(response.ok) {
                location.reload();
                return;
            }
            throw new Error('Request failed.');
            })
        .catch(function(error) {
            console.log(error);
        });
    }
}
</script>

</div>
</div>

</body>
</html>

